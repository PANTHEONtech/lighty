apiVersion: v1

metadata:
  name: {{ include "lighty-rnc-app-helm.fullname" . }}
kind: ConfigMap
data:
  lighty-config.json: |
    {
        "modules": {
            "moduleTimeoutSeconds": {{ .Values.lighty.moduleTimeOut | quote }}
        },
        "controller":{
            "restoreDirectoryPath":"./clustered-datastore-restore",
            "maxDataBrokerFutureCallbackQueueSize":1000,
            "maxDataBrokerFutureCallbackPoolSize":10,
            "metricCaptureEnabled":false,
            "mailboxCapacity":1000,
            "moduleShardsConfig": "configuration/initial/module-shards.conf",
            "modulesConfig": "configuration/initial/modules.conf",
            "domNotificationRouterConfig":{
                "queueDepth":65536,
                "spinTime":0,
                "parkTime":0,
                "unit":"MILLISECONDS"
            },
            "actorSystemConfig":{
                {{- if .Values.lighty.pekko.isSingleNode }}
                "pekkoConfigPath":"singlenode/pekko-default.conf",
                {{- else }}
                "pekkoConfigPath":"{{ .Values.lighty.configDirectoryName }}/{{ .Values.lighty.pekko.pekkoNodeConfigFilename }}",
                {{- end }}
                "factoryPekkoConfigPath":"singlenode/factory-pekko.conf"
            },
            "schemaServiceConfig":{
                "topLevelModels":[
                  { "usedBy": "CONTROLLER", "name": "odl-general-entity", "revision": "2015-09-30", "nameSpace": "urn:opendaylight:params:xml:ns:yang:mdsal:core:general-entity"},
                  { "usedBy": "CONTROLLER", "name": "ietf-yang-types", "revision": "2013-07-15", "nameSpace": "urn:ietf:params:xml:ns:yang:ietf-yang-types"},
                  { "usedBy": "CONTROLLER", "name": "iana-if-type", "revision": "2023-01-26", "nameSpace": "urn:ietf:params:xml:ns:yang:iana-if-type"},
                  { "usedBy": "CONTROLLER", "name": "odl-entity-owners", "nameSpace": "urn:opendaylight:params:xml:ns:yang:controller:entity-owners"},
                  { "usedBy": "CONTROLLER", "name": "opendaylight-l2-types", "revision": "2013-08-27", "nameSpace": "urn:opendaylight:l2:types"},
                  { "usedBy": "CONTROLLER", "name": "distributed-datastore-provider", "revision": "2025-01-30", "nameSpace": "urn:opendaylight:params:xml:ns:yang:controller:config:distributed-datastore-provider"},
                  { "usedBy": "CONTROLLER", "name":"ietf-interfaces", "revision":"2018-02-20", "nameSpace":"urn:ietf:params:xml:ns:yang:ietf-interfaces"},
                  { "usedBy": "CONTROLLER", "name": "cluster-admin", "revision": "2025-01-31", "nameSpace": "urn:opendaylight:params:xml:ns:yang:controller:md:sal:cluster:admin"},
                  { "usedBy": "RESTCONF", "name": "ietf-restconf-monitoring", "revision": "2017-01-26", "nameSpace": "urn:ietf:params:xml:ns:yang:ietf-restconf-monitoring"},
                  { "usedBy": "RESTCONF", "name": "sal-remote-augment", "revision": "2023-11-03", "nameSpace": "urn:sal:restconf:event:subscription"},
                  { "usedBy": "RESTCONF", "name": "ietf-restconf", "revision": "2017-01-26", "nameSpace": "urn:ietf:params:xml:ns:yang:ietf-restconf"},
                  { "usedBy": "RESTCONF/NETCONF", "name": "ietf-yang-library", "revision": "2019-01-04", "nameSpace": "urn:ietf:params:xml:ns:yang:ietf-yang-library"},
                  { "usedBy": "NETCONF", "name": "netconf-keystore", "revision": "2024-07-08", "nameSpace": "urn:opendaylight:netconf:keystore"},
                  { "usedBy": "NETCONF", "name": "netconf-node-topology", "revision": "2024-09-11", "nameSpace": "urn:opendaylight:netconf-node-topology"},
                  { "usedBy": "NETCONF", "name":"ietf-netconf", "revision":"2011-06-01", "nameSpace":"urn:ietf:params:xml:ns:netconf:base:1.0"},
                  { "usedBy": "AAA", "name": "aaa-cert-mdsal", "revision":"2016-03-21", "nameSpace":"urn:opendaylight:yang:aaa:cert:mdsal"},
                  { "usedBy": "AAA", "name": "aaa", "revision": "2016-12-14", "nameSpace": "urn:opendaylight:params:xml:ns:yang:aaa"},
                  { "usedBy": "AAA", "name": "aaa-encrypt-service-config", "revision": "2024-02-02", "nameSpace": "config:aaa:authn:encrypt:service:config"},
                  { "usedBy": "CLUSTER", "name": "netconf-clustered-topology-config", "revision": "2017-04-19", "nameSpace": "urn:opendaylight:netconf:topology:singleton:config"}
                ]
            }
        },
        "restconf":{
            "inetAddress":"0.0.0.0",
            "httpPort":{{ .Values.lighty.restconf.restconfPort }},
            "restconfServletContextPath":{{ .Values.lighty.restconf.restconfPath | quote}}
        },
        "lighty-server":{
            "useHttp2": {{ .Values.lighty.server.useHttp2 }},
            "useHttps": {{ .Values.lighty.server.useHttps }},
            "needClientAuth": {{ .Values.lighty.server.needClientAuth }},
            "keyStorePassword": {{ .Values.lighty.server.keyStorePassword | quote }},
            "keyStoreType": {{ .Values.lighty.server.keyStoreType | quote }},
            "keyStoreFilePath": "{{ .Values.lighty.server.keyStoreDirectory }}/{{ .Values.lighty.server.keyStoreFileName }}",
            "trustKeyStorePassword": {{ .Values.lighty.server.trustKeyStorePassword | quote }},
            "trustKeyStoreFilePath": "{{ .Values.lighty.server.trustKeyStoreDirectory }}/{{ .Values.lighty.server.trustKeyStoreFileName }}",
            "enableOpenApi": {{ .Values.lighty.server.enableOpenApi }}
        },
        "netconf-northbound":{
            "connectionTimeout":20000,
            "monitoringUpdateInterval":6,
            "netconfNorthboundTcpServerBindingAddress":"0.0.0.0",
            "netconfNorthboundTcpServerPortNumber":"2831",
            "netconfNorthboundSshServerBindingAddress":"0.0.0.0",
            "netconfNorthboundSshServerPortNumber":"2830",
            "userCredentials":{
                "admin":"admin"
            }
        },
        "netconf":{
            "topologyId":"topology-netconf"
        },
        "aaa": {
            "enableAAA": {{ .Values.lighty.aaa.enableAAA }},
            "moonEndpointPath" : {{ .Values.lighty.aaa.moonEndpointPath | quote }},
            "dbUsername" : {{ .Values.lighty.aaa.dbUsername | quote }},
            "dbPassword" : {{ .Values.lighty.aaa.dbPassword | quote }},
            "dbPath": {{ .Values.lighty.aaa.dbPath | quote }},
            "username": {{ .Values.lighty.aaa.username | quote }},
            "password": {{ .Values.lighty.aaa.password | quote }}
        }
    }

  log4j2.xml: |
    <Configuration status="INFO">
        <Appenders>
            <Console name="ConsoleAppender" target="SYSTEM_OUT">
                <PatternLayout pattern="%5p %d{HH:mm:ss} [%c] (%F:%L) - %m%n" />
            </Console>
        </Appenders>
    
        <Loggers>
            <Root level="INFO">
                <AppenderRef ref="ConsoleAppender"/>
            </Root>
        </Loggers>
    </Configuration>  

  pekko-node-k8s.conf: |
    pekko {

      log-level = "debug"

      actor {
        warn-about-java-serializer-usage = off
        provider = "org.apache.pekko.cluster.ClusterActorRefProvider"
        serializers {
          java = "org.apache.pekko.serialization.JavaSerializer"
          proto = "org.apache.pekko.remote.serialization.ProtobufSerializer"
          simpleReplicatedLogEntry = "org.opendaylight.controller.cluster.raft.persisted.SimpleReplicatedLogEntrySerializer"
        }

        serialization-bindings {
          "com.google.protobuf.Message" = proto
          "org.opendaylight.controller.cluster.datastore.messages.ReadyLocalTransaction" = readylocal
          "org.opendaylight.controller.cluster.raft.persisted.SimpleReplicatedLogEntry" = simpleReplicatedLogEntry
        }
      }


      remote {
        artery {
          canonical.hostname = ${?HOSTNAME}
          canonical.port = {{ .Values.lighty.pekko.remotingPort }}
          bind-hostname = 0.0.0.0
          bind-port = {{ .Values.lighty.pekko.remotingPort }}
        }
      }

      cluster {
        seed-nodes = []
        roles = [
          "{{ .Values.lighty.pekko.memberNamePrefix }}"${?HOSTNAME}
        ]
        downing-provider-class = "org.apache.pekko.cluster.sbr.SplitBrainResolverProvider"
        split-brain-resolver {
          active-strategy = "{{ .Values.lighty.pekko.sbrStrategy }}"
        }
      }

      management.http.hostname = ${?HOSTNAME}
      management.http.bind-hostname = "0.0.0.0"
      management.http.port = {{ .Values.lighty.pekko.managementPort }}
      management.http.bind-port = {{ .Values.lighty.pekko.managementPort }}

      management.cluster.bootstrap {
        new-cluster-enabled = on
        contact-point-discovery {
          required-contact-point-nr = {{ .Values.lighty.pekko.minimumClusterNodes }} // minimun number of nodes to bootstrap the cluster
        }
      }

      discovery {
        method = kubernetes-api
        kubernetes-api {
          class = org.apache.pekko.discovery.kubernetes.KubernetesApiServiceDiscovery
          pod-namespace = {{ .Values.lighty.pekko.discovery.podNamespace | quote }} // in which namespace cluster is running
          pod-label-selector = "{{ .Values.lighty.pekko.discovery.podSelectorName }}={{ .Values.lighty.pekko.discovery.podSelectorValue }}" // selector - to find other cluster nodes
          pod-port-name = {{ .Values.lighty.pekko.discovery.portName | quote }} // name of cluster management port
        }
      }

      lighty-kubernetes {
        pod-restart-timeout = 30
      }

      persistence {
        # You can choose to put the snapshots/journal directories somewhere else by modifying
        # the following two properties. The directory location specified may be a relative or absolute path.

        journal.leveldb.dir = "target/journal"
        snapshot-store.local.dir = "target/snapshots"
        # Use lz4 compression for LocalSnapshotStore snapshots
        snapshot-store.local.use-lz4-compression = false
        # Size of blocks for lz4 compression: 64KB, 256KB, 1MB or 4MB
        snapshot-store.local.lz4-blocksize = 256KB

        journal {
          leveldb {
            # Set native = off to use a Java-only implementation of leveldb.
            # Note that the Java-only version is not currently considered by Pekko to be production quality,
            # but being Java-only makes it work also on platforms where native leveldb is not available.

            #native = on
          }
        }
      }

    }
