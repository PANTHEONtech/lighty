name: Publish docker image and prepare helm charts
description: 'Publish docker image and prepare helm charts'
inputs:
  app-modules:
    description: Name of the modules with format ':{module-name},...' required to build docker image, e.g. ":lighty-rnc-app,:lighty-rnc-app-docker,:lighty-rnc-module"
    required: true
  app-docker-pom-path:
    description: Path to docker pom.xml file from repository root, e.g. "lighty-applications/lighty-rnc-app-aggregator/lighty-rnc-app-docker/pom.xml"
    required: true
  app-helm-values-path:
    description: Path to Helm YAML values from repository root, e.g. "lighty-applications/lighty-rnc-app-aggregator/lighty-rnc-app-helm/helm/lighty-rnc-app-helm/values.yaml"
    required: true
  image-name:
    description: Desired NAME of docker image, e.g. "lighty-rnc"
    required: true
  version:
    description: Desired version of published docker image & helm charts, e.g. "14.0.0"
    required: true
  image-tag-latest:
    description: Should be this docker labeled with tag latest? Enter `true` if the tag `latest` should be added for image.
    default: "false"
    required: true
  publish-access-key:
    description: The branch, tag or SHA to checkout. (if "default" the selected branch will be used)
    default: default
    required: true
runs:
  using: "composite"
  steps:
    - name: Env docker image name
      env:
        APP_MODULES: ${{ inputs.app-modules }}
        APP_DOCKER_POM_PATH: ${{ inputs.app-docker-pom-path }}
        APP_HELM_VALUES_PATH: ${{ inputs.app-helm-values-path }}
        DOCKER_IMAGE_NAME: ghcr.io/pantheontech/${{ inputs.image-name }}
        DOCKER_IMAGE_VERSION: ${{ inputs.version }}\
        DOCKER_IMAGE_TAG_LATEST: ${{ inputs.image-tag-latest }}
        PUBLISH_ACCESS_KEY: ${{ inputs.publish-access-key }}
        DOCKER_IMAGE_NAME_TAG: $DOCKER_IMAGE_NAME:${{ inputs.version }}
      shell: bash
      run: |
        echo "APP_MODULES=$(echo $APP_MODULES)" >> $GITHUB_ENV
        echo "APP_DOCKER_POM_PATH=$(echo $APP_DOCKER_POM_PATH)" >> $GITHUB_ENV
        echo "APP_HELM_VALUES_PATH=$(echo $APP_HELM_VALUES_PATH)" >> $GITHUB_ENV      
        echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME)" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_VERSION=$(echo $DOCKER_IMAGE_VERSION)" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_TAG_LATEST=$(echo $DOCKER_IMAGE_TAG_LATEST)" >> $GITHUB_ENV
        echo "PUBLISH_ACCESS_KEY=$(echo PUBLISH_ACCESS_KEY)" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_NAME_TAG=$(echo $DOCKER_IMAGE_NAME_TAG)" >> $GITHUB_ENV
    - name: Build docker image
      shell: bash
      run: mvn install -B -pl $APP_MODULES -P docker
    - name: Tag image
      shell: bash
      run: |
        image_name=$(mvn help:evaluate -f $APP_DOCKER_POM_PATH -Dexpression=image.name -q -DforceStdout)
        docker tag $image_name $DOCKER_IMAGE_NAME_TAG
        if [ $DOCKER_IMAGE_TAG_LATEST = 'true' ]; then
          docker tag $image_name $DOCKER_IMAGE_NAME:latest
        fi
        docker images | grep $image_name
    - name: List docker images
      shell: bash
      run: |
        docker images
    - name: Docker log in (ghcr.io)
      shell: bash
      run: |
        echo $PUBLISH_ACCESS_KEY | docker login  --username ${{ github.actor }} --password-stdin ghcr.io
    - name: Publish docker image (ghcr.io)
      shell: bash
      run: |
        docker push $DOCKER_IMAGE_NAME_TAG
        if [ $DOCKER_IMAGE_TAG_LATEST = 'true' ]; then
          docker push $DOCKER_IMAGE_NAME:latest
        fi
    - name: Check if docker image is pullable  (ghcr.io)
      shell: bash
      run: |
        docker rmi $DOCKER_IMAGE_NAME_TAG
        docker pull $DOCKER_IMAGE_NAME_TAG
    - name: Install yq (yaml processor)
      shell: bash
      run: |
        sudo snap install yq
    - name: Set image.name, image.version in values.yaml of helm chart
      shell: bash
      run: |
        yq eval '.image.name=$DOCKER_IMAGE_NAME | .image.version=$DOCKER_IMAGE_VERSION' $APP_HELM_VALUES_PATH -i
    - name: Print values.yaml
      shell: bash
      run: |
        cat -A $APP_HELM_VALUES_PATH
