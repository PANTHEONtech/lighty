name: Publish docker image and prepare helm charts
description: 'Publish docker image and prepare helm charts'
inputs:
  app-modules:
    description: Name of the modules with format ':{module-name},...' required to build docker image, e.g. ":lighty-rnc-app,:lighty-rnc-app-docker,:lighty-rnc-module"
    required: true
  app-docker-pom-path:
    description: Path to docker pom.xml file from repository root, e.g. "lighty-applications/lighty-rnc-app-aggregator/lighty-rnc-app-docker/pom.xml"
    required: true
  app-helm-values-path:
    description: Path to Helm YAML values from repository root, e.g. "lighty-applications/lighty-rnc-app-aggregator/lighty-rnc-app-helm/helm/lighty-rnc-app-helm/values.yaml"
    required: true
  image-name:
    description: Desired NAME of docker image, e.g. "lighty-rnc"
    required: true
  version:
    description: Desired version of published docker image & helm charts, e.g. "14.0.0"
    required: true
  image-tag-latest:
    description: Should be this docker labeled with tag latest? Enter `true` if the tag `latest` should be added for image.
    default: "false"
    required: true
  publish-access-key:
    description: The branch, tag or SHA to checkout. (if "default" the selected branch will be used)
    default: default
    required: true
runs:
  using: "composite"
  steps:
    - name: Env docker image name
      shell: bash
      run: |
        DOCKER_IMAGE_NAME=$(echo ghcr.io/pantheontech/${{ inputs.image-name }})
        DOCKER_IMAGE_NAME_TAG=$(echo $DOCKER_IMAGE_NAME:${{ inputs.version }})
        echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME)" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_NAME_TAG=$(echo $DOCKER_IMAGE_NAME_TAG)" >> $GITHUB_ENV
    - name: Build docker image
      shell: bash
      run: mvn install -B -pl ${{ inputs.app-modules }} -P docker
    - name: Tag image
      shell: bash
      run: |
        image_name=$(mvn help:evaluate -f ${{ inputs.app-docker-pom-path }} -Dexpression=image.name -q -DforceStdout)
        docker tag $image_name $DOCKER_IMAGE_NAME_TAG
        if [ "${{ inputs.image-tag-latest }}" = 'true' ]; then
          docker tag $image_name $DOCKER_IMAGE_NAME:latest
        fi
        docker images | grep $image_name
    - name: List docker images
      shell: bash
      run: |
        docker images
    - name: Docker log in (ghcr.io)
      shell: bash
      run: |
        echo ${{ inputs.publish-access-key}} | docker login  --username ${{ github.actor }} --password-stdin ghcr.io
    - name: Publish docker image (ghcr.io)
      shell: bash
      run: |
        docker push $DOCKER_IMAGE_NAME_TAG
        if [ "${{ inputs.image-tag-latest }}" = 'true' ]; then
          docker push $DOCKER_IMAGE_NAME:latest
        fi
    - name: Check if docker image is pullable  (ghcr.io)
      shell: bash
      run: |
        docker rmi $DOCKER_IMAGE_NAME_TAG
        docker pull $DOCKER_IMAGE_NAME_TAG
    - name: Install yq (yaml processor)
      shell: bash
      run: |
        sudo snap install yq
    - name: Set image.name, image.version in values.yaml of helm chart
      shell: bash
      run: |
        yq eval '.image.name="ghcr.io/pantheontech/${{ inputs.image-name }}" | .image.version="${{ inputs.version }}"' ${{ inputs.app-helm-values-path }} -i
    - name: Print values.yaml
      shell: bash
      run: |
        cat -A ${{ inputs.app-helm-values-path }}
