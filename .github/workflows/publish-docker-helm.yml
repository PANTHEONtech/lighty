name: Publish docker image and helm chart
on:
  workflow_dispatch:
    inputs:
      app-name:
        description: Name of the application in /lighty-applications
        default: lighty-rnc
        required: true
      image-name:
        description: Desired NAME of docker image
        default: lighty-rnc
        required: true
      version:
        description: Desired version of published docker image & helm charts
        required: true
      image-tag-latest:
        description: Should be this docker labeled with tag latest? Enter `true` if the tag `latest` should be added for image.
        default: "false"
        required: true
      checkout-ref:
        description: The branch, tag or SHA to checkout. (if "default" the selected branch will be used)
        default: default
        required: true
jobs:
  publish-docker-helm:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      app-aggregator-dir: lighty-applications/${{ github.event.inputs.app-name }}-app-aggregator
      PUBLISH_ACCESS_KEY: ${{ secrets.MM_PKG_WRITE }}
    name: "Publish docker image and helm chart. App: ${{ github.event.inputs.app-name }}, Checkout-ref: ${{ github.event.inputs.checkout-ref }}"
    steps:
      - name: Clone Repository
        if: ${{ github.event.inputs.checkout-ref == 'default' }}
        uses: actions/checkout@v2
      - name: "Clone Repository, Ref: ${{ github.event.inputs.checkout-ref }}"
        if: ${{ github.event.inputs.checkout-ref != 'default' }}
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.checkout-ref }}
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Env docker image name
        run: |
          DOCKER_IMAGE_NAME=$(echo ghcr.io/pantheontech/${{ github.event.inputs.image-name }})
          DOCKER_IMAGE_NAME_TAG=$(echo $DOCKER_IMAGE_NAME:${{ github.event.inputs.version }})
          echo "DOCKER_IMAGE_NAME=$(echo $DOCKER_IMAGE_NAME)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME_TAG=$(echo $DOCKER_IMAGE_NAME_TAG)" >> $GITHUB_ENV
      - name: Build docker image
        run: mvn install -B -pl :${{ github.event.inputs.app-name }}-module,:${{ github.event.inputs.app-name }}-app,:${{ github.event.inputs.app-name }}-app-docker -P docker
      - name: Tag image
        run: |
          image_name=$(mvn help:evaluate -f ${{ env.app-aggregator-dir}}/${{ github.event.inputs.app-name }}-app-docker/pom.xml -Dexpression=image.name -q -DforceStdout)
          docker tag $image_name $DOCKER_IMAGE_NAME_TAG
          if [ "${{ github.event.inputs.image-tag-latest }}" = 'true' ]; then
            docker tag $image_name $DOCKER_IMAGE_NAME:latest
          fi
          docker images | grep $image_name
      - name: List docker images
        run: |
          docker images
      - name: Docker log in (ghcr.io)
        run: |
          echo ${{ env.PUBLISH_ACCESS_KEY}} | docker login  --username ${{ github.actor }} --password-stdin ghcr.io
      - name: Publish docker image (ghcr.io)
        run: |
          docker push $DOCKER_IMAGE_NAME_TAG
          if [ "${{ github.event.inputs.image-tag-latest }}" = 'true' ]; then
            docker push $DOCKER_IMAGE_NAME:latest
          fi
      - name: Check if docker image is pullable  (ghcr.io)
        run: |
          docker rmi $DOCKER_IMAGE_NAME_TAG
          docker pull $DOCKER_IMAGE_NAME_TAG
      - name: Install yq (yaml processor)
        run: |
          sudo snap install yq
      - name: Set image.name, image.version in values.yaml of helm chart
        run: |
          yq eval '.image.name="ghcr.io/pantheontech/${{ github.event.inputs.image-name }}" | .image.version="${{ github.event.inputs.version }}"' ${{ env.app-aggregator-dir}}/${{ github.event.inputs.app-name }}-app-helm/helm/${{ github.event.inputs.app-name }}-app-helm/values.yaml -i
      - name: Print values.yaml
        run: |
          cat -A ${{ env.app-aggregator-dir}}/${{ github.event.inputs.app-name }}-app-helm/helm/${{ github.event.inputs.app-name }}-app-helm/values.yaml
      - name: "Publish Helm chart to Helm repository (Version: ${{ github.event.inputs.version }} )"
        if: ${{ github.event.inputs.version != '' }}
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ env.PUBLISH_ACCESS_KEY }}
          charts_dir: ${{ env.app-aggregator-dir}}/${{ github.event.inputs.app-name }}-app-helm/helm/
          charts_url: https://pantheontech.github.io/helm-charts/
          repository: helm-charts
          branch: main
          chart_version: ${{ github.event.inputs.version }}
